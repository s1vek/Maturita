# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E3exwsakI1fal4HouaYd8_Dgho23VsAE
"""

def merge_sort(arr):
    """
    Řadí seznam pomocí algoritmu Merge Sort.

    Parametry:
    arr -- seznam, který chceme seřadit

    Návratová hodnota:
    Seřazený seznam
    """
    # Základní případ: seznam o délce 0 nebo 1 je již seřazený
    if len(arr) <= 1:
        return arr

    # Nalezení středu seznamu
    # Použijeme celočíselné dělení (//), abychom získali index
    mid = len(arr) // 2

    # Rozdělení seznamu na levou a pravou polovinu
    # Používáme tzv. slicing (arr[start:end]) pro vytvoření nových seznamů
    left_half = arr[:mid]  # Prvky od začátku do středu (nezahrnuje střed)
    right_half = arr[mid:]  # Prvky od středu do konce

    # Rekurzivně seřadíme obě poloviny
    # Toto je klíčový krok "rozděluj a panuj" - nejdříve vyřešíme menší podproblémy
    left_half = merge_sort(left_half)
    right_half = merge_sort(right_half)

    # Sloučíme seřazené poloviny dohromady
    # Toto je krok "kombinuj" - spojujeme řešení podproblémů
    return merge(left_half, right_half)

def merge(left, right):
    """
    Sloučí dva seřazené seznamy do jednoho seřazeného seznamu.

    Parametry:
    left -- první seřazený seznam
    right -- druhý seřazený seznam

    Návratová hodnota:
    Nový seřazený seznam obsahující všechny prvky z obou vstupních seznamů
    """
    result = []  # Vytvoříme nový seznam pro výsledek
    i = j = 0    # Indexy pro procházení levého a pravého seznamu

    # Procházíme oba seznamy současně, dokud nedojdeme na konec jednoho z nich
    while i < len(left) and j < len(right):
        # Porovnáváme aktuální prvky obou seznamů
        if left[i] <= right[j]:
            # Pokud je prvek z levého seznamu menší nebo roven, přidáme ho do výsledku
            result.append(left[i])
            i += 1  # Posuneme se na další prvek v levém seznamu
        else:
            # Pokud je prvek z pravého seznamu menší, přidáme ho do výsledku
            result.append(right[j])
            j += 1  # Posuneme se na další prvek v pravém seznamu

    result.extend(left[i:])
    result.extend(right[j:])
    return result  # Vrátíme sloučený seřazený seznam

# Ukázka použití
if __name__ == "__main__":
    # Vytvoříme neseřazený seznam
    test_array = [38, 27, 43, 3, 9, 82, 10]

    # Zavoláme náš algoritmus
    sorted_array = merge_sort(test_array)

    # Vypíšeme výsledky
    print("Původní seznam:", test_array)
    print("Seřazený seznam:", sorted_array)

def bubble_sort(arr):
  n = len(arr) # Získáme délku pole

  for i in range(n):# Procházíme všechny prvky pole
    for j in range(0, n-i-1):# Posledních i prvků je již na správném místě, takže je nemusíme kontrolovat
      if arr[j] > arr[j+1]: # Porovnáme sousední prvky
        arr[j], arr[j+1] = arr[j+1], arr[j]# Prohodíme prvky, pokud je aktuální prvek větší než následující

  return arr

arr = [64, 34, 25, 12, 22, 11, 90]
sorted_arr = bubble_sort(arr)
print(sorted_arr)

def quick_sort(arr):
    if len(arr) <= 1:
        return arr

    pivot = arr[-1]  # Poslední prvek jako pivot

    mensi = [x for x in arr[:-1] if x < pivot]
    stejne = [x for x in arr if x == pivot]
    vetsi = [x for x in arr[:-1] if x > pivot]

    return quick_sort(mensi) + stejne + quick_sort(vetsi)


# Příklad použití
moje_pole = [9, -3, 5, 2, 6, 8, -6, 1, 3]
serazene = quick_sort(moje_pole)
print(serazene)  # Výstup: [-6, -3, 1, 2, 3, 5, 6, 8, 9]